package com.empathytraining.data.models

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Data model representing an empathy training scenario Each scenario
 * contains a situation that requires an empathetic response along with an
 * example of a good empathetic response
 *
 * This entity will be stored in Room database and can be prepopulated with
 * default scenarios when the database is first created
 */
@Entity(tableName = "empathy_scenarios")
data class EmpathyScenario(
    /** Unique identifier for the scenario Auto-generated by Room database */
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "scenario_id") val id: Long = 0,

    /**
     * The actual scenario text that user will respond to Examples: "I'm so
     * tired of this job", "Nobody understands me"
     */
    @ColumnInfo(name = "scenario_text") val scenarioText: String,

    /**
     * Example of a good empathetic response to this scenario This will be
     * shown to the user after they provide their response
     */
    @ColumnInfo(name = "example_response") val exampleResponse: String,

    /**
     * Category of the scenario for potential future filtering/organization
     * Examples: "work", "relationships", "family", "personal", "health"
     */
    @ColumnInfo(name = "category") val category: String,

    /**
     * Difficulty level of the scenario (1-5) 1 = Easy scenarios for beginners
     * 5 = Complex scenarios requiring advanced empathy skills
     */
    @ColumnInfo(name = "difficulty_level") val difficultyLevel: Int = 1,

    /**
     * Whether this scenario is currently active and can be shown to users
     * Allows for temporary disabling of scenarios without deletion
     */
    @ColumnInfo(name = "is_active") val isActive: Boolean = true,

    /**
     * Number of times this scenario has been used Useful for analytics and
     * ensuring variety in scenario selection
     */
    @ColumnInfo(name = "usage_count") val usageCount: Int = 0,
) {

    /**
     * Helper function to get a short preview of the scenario text Useful for
     * displaying in lists where space is limited
     *
     * @param maxLength Maximum number of characters to include
     * @return Truncated scenario text with ellipsis if necessary
     */
    fun getPreview(maxLength: Int = 50): String {
        return if (scenarioText.length > maxLength) {
            scenarioText.take(maxLength - 3) + "..."
        } else {
            scenarioText
        }
    }

    /**
     * Helper function to determine if this is a beginner-friendly scenario
     *
     * @return True if difficulty level is 1 or 2
     */
    fun isBeginnerFriendly(): Boolean {
        return difficultyLevel <= 2
    }

    /**
     * Helper function to get category display name with proper capitalization
     *
     * @return Capitalized category name for UI display
     */
    fun getCategoryDisplayName(): String {
        return category.replaceFirstChar {
            if (it.isLowerCase()) it.titlecase() else it.toString()
        }
    }

    companion object {
        /**
         * Available categories for scenarios Used for validation and UI
         * consistency
         */
        val AVAILABLE_CATEGORIES = listOf(
            "work",
            "relationships",
            "family",
            "personal",
            "health",
            "friendship",
            "education",
            "general"
        )

        /** Difficulty level descriptions Used for UI display and user guidance */
        val DIFFICULTY_DESCRIPTIONS = mapOf(
            1 to "Very Easy", 2 to "Easy", 3 to "Medium", 4 to "Hard", 5 to "Very Hard"
        )

        /**
         * Maximum recommended length for scenario text Ensures scenarios remain
         * concise and focused
         */
        const val MAX_SCENARIO_LENGTH = 200

        /**
         * Maximum recommended length for example response Keeps example responses
         * concise and actionable
         */
        const val MAX_EXAMPLE_RESPONSE_LENGTH = 300
    }
}