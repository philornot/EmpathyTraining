package com.empathytraining.data.models

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Data model representing an empathy training scenario Each scenario
 * contains a situation that requires an empathetic response along with an
 * example of a good empathetic response
 *
 * This entity will be stored in Room database and scenarios are loaded
 * from string resources to support internationalization
 */
@Entity(tableName = "empathy_scenarios")
data class EmpathyScenario(
    /** Unique identifier for the scenario Auto-generated by Room database */
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "scenario_id") val id: Long = 0,

    /**
     * Resource key for the scenario text that user will respond to Maps to
     * string resources like "scenario_work_exhausted"
     */
    @ColumnInfo(name = "scenario_key") val scenarioKey: String,

    /**
     * Resource key for the example empathetic response Maps to string
     * resources like "scenario_work_exhausted_example"
     */
    @ColumnInfo(name = "example_key") val exampleKey: String,

    /**
     * Category of the scenario for potential future filtering/organization
     * Examples: "work", "relationships", "family", "personal", "health"
     */
    @ColumnInfo(name = "category") val category: String,

    /**
     * Difficulty level of the scenario (1-5) 1 = Easy scenarios for beginners
     * 5 = Complex scenarios requiring advanced empathy skills
     */
    @ColumnInfo(name = "difficulty_level") val difficultyLevel: Int = 1,

    /**
     * Whether this scenario is currently active and can be shown to users
     * Allows for temporary disabling of scenarios without deletion
     */
    @ColumnInfo(name = "is_active") val isActive: Boolean = true,

    /**
     * Number of times this scenario has been used Useful for analytics and
     * ensuring variety in scenario selection
     */
    @ColumnInfo(name = "usage_count") val usageCount: Int = 0,
) {

    /**
     * Helper function to determine if this is a beginner-friendly scenario
     *
     * @return True if difficulty level is 1 or 2
     */
    fun isBeginnerFriendly(): Boolean {
        return difficultyLevel <= 2
    }

    /**
     * Helper function to get category display name with proper capitalization
     *
     * @return Capitalized category name for UI display
     */
    fun getCategoryDisplayName(): String {
        return category.replaceFirstChar {
            if (it.isLowerCase()) it.titlecase() else it.toString()
        }
    }

    companion object {
        /**
         * Available categories for scenarios Used for validation and UI
         * consistency
         */
        val AVAILABLE_CATEGORIES = listOf(
            "work",
            "relationships",
            "family",
            "personal",
            "health",
            "friendship",
            "education",
            "general"
        )

        /** Difficulty level descriptions Used for UI display and user guidance */
        val DIFFICULTY_DESCRIPTIONS = mapOf(
            1 to "Very Easy", 2 to "Easy", 3 to "Medium", 4 to "Hard", 5 to "Very Hard"
        )

        /**
         * Scenario keys mapped to their categories and difficulty levels This
         * defines all available scenarios in the app
         */
        val SCENARIO_DEFINITIONS = listOf(
            ScenarioDefinition("scenario_work_exhausted", "work", 2),
            ScenarioDefinition("scenario_work_unappreciated", "work", 2),
            ScenarioDefinition("scenario_work_promotion", "work", 3),
            ScenarioDefinition("scenario_work_job_loss", "work", 4),
            ScenarioDefinition("scenario_relationships_fighting", "relationships", 4),
            ScenarioDefinition("scenario_relationships_not_listening", "relationships", 3),
            ScenarioDefinition("scenario_relationships_breakup", "relationships", 4),
            ScenarioDefinition("scenario_family_independence", "family", 3),
            ScenarioDefinition("scenario_family_teenager", "family", 4),
            ScenarioDefinition("scenario_family_caregiving", "family", 4),
            ScenarioDefinition("scenario_personal_not_good_enough", "personal", 3),
            ScenarioDefinition("scenario_personal_stuck_pattern", "personal", 3),
            ScenarioDefinition("scenario_personal_directionless", "personal", 2),
            ScenarioDefinition("scenario_personal_pet_loss", "personal", 3),
            ScenarioDefinition("scenario_health_chronic_pain", "health", 4),
            ScenarioDefinition("scenario_health_anxiety", "health", 3),
            ScenarioDefinition("scenario_health_depression", "health", 5),
            ScenarioDefinition("scenario_friendship_betrayal", "friendship", 3),
            ScenarioDefinition("scenario_friendship_one_sided", "friendship", 3),
            ScenarioDefinition("scenario_friendship_excluded", "friendship", 3),
            ScenarioDefinition("scenario_education_failing", "education", 2),
            ScenarioDefinition("scenario_education_rejection", "education", 3),
            ScenarioDefinition("scenario_general_everything_wrong", "general", 3),
            ScenarioDefinition("scenario_general_misunderstood", "general", 2),
            ScenarioDefinition("scenario_general_uncertain_future", "general", 2),
            ScenarioDefinition("scenario_general_disappointing", "general", 3)
        )
    }

    /** Data class to define scenario metadata */
    data class ScenarioDefinition(
        val scenarioKey: String,
        val category: String,
        val difficultyLevel: Int,
    ) {
        val exampleKey: String
            get() = "${scenarioKey}_example"
    }
}